---
description: 
globs: test/**/*_test.dart
alwaysApply: false
---
# Правила написания тестов в классическом стиле

## Основные принципы

1. **Используй только классическую школу тестирования**:
   - Никаких моков, стабов или шпионов
   - Используй реальные зависимости или тестовые дублеры, но не моки
   - Проверяй только финальное состояние или возвращаемое значение, а не взаимодействия

2. **Структура AAA**:
   - Arrange (подготовка) - создание всех необходимых объектов и установка начальных условий
   - Act (действие) - вызов тестируемого метода, желательно в одну строку кода
   - Assert (проверка) - проверка результатов или изменений состояния

3. **Один тест - одна проверяемая единица поведения**:
   - Если в тесте несколько действий (Act) или проверок (Assert), разбей его на отдельные тесты
   - Избегай логических условий в тестах (if/else, циклы)

4. **Четкая изоляция тестов**:
   - Каждый тест должен быть независимым
   - Используй фабричные методы вместо полей класса для создания тестовых данных
   - Именуй тестируемую систему как `sut` (System Under Test)

5. **Читаемые имена тестов**:
   - Имя теста должно объяснять сценарий понятным языком
   - Формат: `[Что_тестируется]_[При_каких_условиях]_[Ожидаемое_поведение]`
   - Разделяй слова подчеркиваниями
   - Не включай имя тестируемого метода в название теста

6. **Эффективность тестов**:
   - Тест должен обеспечивать максимальную защиту от багов
   - Тест должен быть устойчив к рефакторингу
   - Тест должен обеспечивать быструю обратную связь
   - Тест должен быть простым в поддержке

## Примеры

### Правильно:

```dart
void test_delivery_is_free_when_cart_total_exceeds_minimum_amount() {
  // Arrange
  final sut = ShoppingCart();
  sut.addItem(Product(price: 100));
  
  // Act
  final deliveryFee = sut.calculateDeliveryFee();
  
  // Assert
  expect(deliveryFee, equals(0));
}
```

### Неправильно (использование моков):

```dart
void test_delivery_is_free_when_cart_total_exceeds_minimum_amount() {
  // Arrange
  final mockPricingService = MockPricingService();
  when(mockPricingService.isEligibleForFreeDelivery(any)).thenReturn(true);
  final sut = ShoppingCart(pricingService: mockPricingService);
  
  // Act
  final deliveryFee = sut.calculateDeliveryFee();
  
  // Assert
  expect(deliveryFee, equals(0));
  verify(mockPricingService.isEligibleForFreeDelivery(any)).called(1);
}
```
