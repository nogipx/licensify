import 'dart:typed_data';
import 'package:test/test.dart';
import 'package:licensify/licensify.dart';

void main() {
  group('üîê Security Demonstration: Tamper Protection', () {
    test('should demonstrate that PASETO signature is embedded in token',
        () async {
      // Arrange - —Å–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
      final sut = await Licensify.createLicenseWithKeys(
        appId: 'com.example.secure',
        expirationDate: DateTime.now().add(Duration(days: 30)),
        type: LicenseType.pro,
        features: {'premium': true, 'users': 100},
      );

      print('üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è:');
      print('   –¢–æ–∫–µ–Ω: ${sut.license.token}');
      print('   App ID: ${await sut.license.appId}');
      print('   –¢–∏–ø: ${(await sut.license.type).name}');
      print('   –ü—Ä–µ–º–∏—É–º: ${(await sut.license.features)['premium']}');

      // Act & Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É
      final validResult = await Licensify.validateLicenseWithKeyBytes(
        license: sut.license,
        publicKeyBytes: sut.publicKeyBytes,
      );

      expect(validResult.isValid, isTrue);
      print('‚úÖ –í–∞–ª–∏–¥–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
    });

    test('should reject any modification to PASETO token', () async {
      // Arrange - —Å–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
      final sut = await Licensify.createLicenseWithKeys(
        appId: 'com.example.secure',
        expirationDate: DateTime.now().add(Duration(days: 30)),
        type: LicenseType.standard,
      );

      // Act - –ø—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–∏–º–∏—Ç–∏—Ä—É–µ–º –∞—Ç–∞–∫—É)
      final originalToken = sut.license.token;
      print('üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: $originalToken');

      // –ü–æ–ø—ã—Ç–∫–∞ 1: –ò–∑–º–µ–Ω—è–µ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –≤ —Ç–æ–∫–µ–Ω–µ
      originalToken.replaceFirst('v4', 'v5');

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –∏–∑ –ø–æ–¥–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å
        // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        final publicKey = LicensifyPublicKey.ed25519(
          Uint8List.fromList(sut.publicKeyBytes),
        );

        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          final keys = Licensify.keysFromBytes(
            privateKeyBytes: Uint8List(32), // Dummy private key
            publicKeyBytes: Uint8List.fromList(sut.publicKeyBytes),
          );

          try {
            // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            // –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç unsafe –º–µ—Ç–æ–¥–æ–≤, –º—ã –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å License –∏–∑ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –ø—Ä–æ–≤–∞–ª–∏—Ç—Å—è
            final wrongKeys = await Licensify.generateSigningKeys();
            try {
              await Licensify.validateLicense(
                license: sut.license,
                publicKey: wrongKeys.publicKey,
              );
              fail('–í–∞–ª–∏–¥–∞—Ü–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è');
            } finally {
              wrongKeys.privateKey.dispose();
              wrongKeys.publicKey.dispose();
            }
          } finally {
            keys.privateKey.dispose();
            keys.publicKey.dispose();
          }
        } finally {
          publicKey.dispose();
        }
      } catch (e) {
        print('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: $e');
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 2: –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —á—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
      final wrongKeys2 = await Licensify.generateSigningKeys();
      try {
        final result = await Licensify.validateLicense(
          license: sut.license,
          publicKey: wrongKeys2.publicKey,
        );

        // Assert - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
        expect(result.isValid, isFalse);
        expect(result.message, contains('verification error'));
        print('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${result.message}');
      } finally {
        wrongKeys2.privateKey.dispose();
        wrongKeys2.publicKey.dispose();
      }

      print(
          'üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');
    });

    test('should demonstrate that only validated licenses contain data',
        () async {
      // Arrange
      final sut = await Licensify.createLicenseWithKeys(
        appId: 'com.example.basic',
        expirationDate: DateTime.now().add(Duration(days: 1)),
        type: LicenseType.standard,
        features: {'basic': true},
      );

      print('üîê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');

      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
      final safeLicense = sut.license; // –°–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π API
      expect(await safeLicense.appId, 'com.example.basic');
      expect((await safeLicense.features)['basic'], isTrue);
      print(
          '‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è: appId="${await safeLicense.appId}", features=${await safeLicense.features}');

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ
      final safeValidation = await Licensify.validateLicenseWithKeyBytes(
        license: safeLicense,
        publicKeyBytes: sut.publicKeyBytes,
      );

      expect(safeValidation.isValid, isTrue);
      print('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é');

      // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
      final wrongKeys = await Licensify.generateSigningKeys();
      try {
        await Licensify.validateLicense(
          license: safeLicense,
          publicKey: wrongKeys.publicKey,
        );
        fail('–í–∞–ª–∏–¥–∞—Ü–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è');
      } catch (e) {
        print('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: $e');
      } finally {
        wrongKeys.privateKey.dispose();
        wrongKeys.publicKey.dispose();
      }

      print(
          'üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –¢–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!');
    });

    test('should verify license properties', () async {
      // Arrange
      final sut = await Licensify.createLicenseWithKeys(
        appId: 'com.example.test',
        expirationDate: DateTime.now().add(Duration(days: 30)),
        type: LicenseType.standard,
        features: {'max_users': 100},
        metadata: {'customer': 'Test Corp'},
      );

      // Verify license properties
      expect(await sut.license.appId, equals('com.example.test'));
      expect((await sut.license.type).name, equals('standard'));
      expect(await sut.license.isTrial, isFalse);
      expect((await sut.license.features)['max_users'], equals(100));
      expect((await sut.license.metadata)?['customer'], equals('Test Corp'));
    });

    test('should demonstrate that ANY data modification invalidates license',
        () async {
      // Arrange - —Å–æ–∑–¥–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      final originalExpiration = DateTime.now().add(Duration(days: 30));
      final sut = await Licensify.createLicenseWithKeys(
        appId: 'com.example.tamper',
        expirationDate: originalExpiration,
        type: LicenseType.standard,
        features: {'max_users': 10, 'api_access': false},
        metadata: {'customer': 'Basic Corp', 'plan': 'starter'},
      );

      print('üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–∏:');
      print('üìã –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏:');
      print('   App ID: ${await sut.license.appId}');
      print('   –¢–∏–ø: ${(await sut.license.type).name}');
      print('   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${await sut.license.expirationDate}');
      print(
          '   –ú–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${(await sut.license.features)['max_users']}');
      print('   API –¥–æ—Å—Ç—É–ø: ${(await sut.license.features)['api_access']}');
      print('   –ö–ª–∏–µ–Ω—Ç: ${(await sut.license.metadata)?['customer']}');
      print('   –ü–ª–∞–Ω: ${(await sut.license.metadata)?['plan']}');

      // Act & Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –≤–∞–ª–∏–¥–Ω–∞
      final originalValidation = await Licensify.validateLicenseWithKeyBytes(
        license: sut.license,
        publicKeyBytes: sut.publicKeyBytes,
      );
      expect(originalValidation.isValid, isTrue);
      print('‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –≤–∞–ª–∏–¥–Ω–∞');

      print('\nüö® –ü–æ–ø—ã—Ç–∫–∏ –∞—Ç–∞–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏:');

      // –ü–æ–ø—ã—Ç–∫–∞ 1: –°–æ–∑–¥–∞–µ–º "—É–ª—É—á—à–µ–Ω–Ω—É—é" –ª–∏—Ü–µ–Ω–∑–∏—é —Å —Ç–µ–º–∏ –∂–µ –∫–ª—é—á–∞–º–∏
      print(
          '\n1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å "—É–ª—É—á—à–µ–Ω–Ω—É—é" –ª–∏—Ü–µ–Ω–∑–∏—é —Å –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º...');
      final extendedExpiration = originalExpiration.add(Duration(days: 365));
      final keys = Licensify.keysFromBytes(
        privateKeyBytes: Uint8List(32), // –§–µ–π–∫–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        publicKeyBytes: Uint8List.fromList(sut.publicKeyBytes),
      );

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é —Å –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º
        // –ù–æ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞!
        final wrongKeys = await Licensify.generateSigningKeys();
        final fakeExtendedLicense = await Licensify.createLicense(
          privateKey: wrongKeys.privateKey,
          appId: 'com.example.tamper', // –¢–æ—Ç –∂–µ app_id
          expirationDate: extendedExpiration, // –ü—Ä–æ–¥–ª–µ–Ω–Ω—ã–π —Å—Ä–æ–∫!
          type: LicenseType.pro, // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–∏–ø!
          features: {'max_users': 1000, 'api_access': true}, // –ë–æ–ª—å—à–µ —Ñ–∏—á!
          metadata: {
            'customer': 'Premium Corp',
            'plan': 'enterprise'
          }, // –õ—É—á—à–∏–π –ø–ª–∞–Ω!
        );

        print('   üìù "–£–ª—É—á—à–µ–Ω–Ω–∞—è" –ª–∏—Ü–µ–Ω–∑–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:');
        print('      –¢–∏–ø: ${(await fakeExtendedLicense.type).name}');
        print('      –ò—Å—Ç–µ–∫–∞–µ—Ç: ${await fakeExtendedLicense.expirationDate}');
        print(
            '      –ú–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${(await fakeExtendedLicense.features)['max_users']}');
        print(
            '      API –¥–æ—Å—Ç—É–ø: ${(await fakeExtendedLicense.features)['api_access']}');

        // –ü—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ–ª—å–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
        final fakeValidation = await Licensify.validateLicenseWithKeyBytes(
          license: fakeExtendedLicense,
          publicKeyBytes: sut.publicKeyBytes, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á!
        );

        expect(fakeValidation.isValid, isFalse);
        print(
            '   ‚ùå "–£–ª—É—á—à–µ–Ω–Ω–∞—è" –ª–∏—Ü–µ–Ω–∑–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${fakeValidation.message}');

        wrongKeys.privateKey.dispose();
        wrongKeys.publicKey.dispose();
      } finally {
        keys.privateKey.dispose();
        keys.publicKey.dispose();
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 2: –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —á—Ç–æ –¥–∞–∂–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –Ω–µ–ª—å–∑—è –ø–æ–¥–¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ä—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
      print(
          '\n2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º...');
      final wrongKeys2 = await Licensify.generateSigningKeys();
      try {
        final wrongValidation = await Licensify.validateLicense(
          license: sut.license, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
          publicKey: wrongKeys2.publicKey, // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
        );

        expect(wrongValidation.isValid, isFalse);
        print(
            '   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${wrongValidation.message}');
      } finally {
        wrongKeys2.privateKey.dispose();
        wrongKeys2.publicKey.dispose();
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 3: –°–æ–∑–¥–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏, –Ω–æ –¥—Ä—É–≥–∏–º–∏ –∫–ª—é—á–∞–º–∏
      print('\n3Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª—é—á–∞–º–∏...');
      final anotherKeys = await Licensify.generateSigningKeys();
      try {
        final identicalLicense = await Licensify.createLicense(
          privateKey: anotherKeys.privateKey,
          appId: 'com.example.tamper', // –¢–µ –∂–µ –¥–∞–Ω–Ω—ã–µ
          expirationDate: originalExpiration, // –¢–æ—Ç –∂–µ —Å—Ä–æ–∫
          type: LicenseType.standard, // –¢–æ—Ç –∂–µ —Ç–∏–ø
          features: {'max_users': 10, 'api_access': false}, // –¢–µ –∂–µ —Ñ–∏—á–∏
          metadata: {
            'customer': 'Basic Corp',
            'plan': 'starter'
          }, // –¢–µ –∂–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        );

        print('   üìù –ò–¥–µ–Ω—Ç–∏—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏');

        // –ü—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
        final identicalValidation = await Licensify.validateLicenseWithKeyBytes(
          license: identicalLicense,
          publicKeyBytes: sut.publicKeyBytes, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á!
        );

        expect(identicalValidation.isValid, isFalse);
        print(
            '   ‚ùå –ò–¥–µ–Ω—Ç–∏—á–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª—é—á–∞–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${identicalValidation.message}');

        // –ù–æ –æ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞ —Å–æ —Å–≤–æ–∏–º –∫–ª—é—á–æ–º
        final correctValidation = await Licensify.validateLicense(
          license: identicalLicense,
          publicKey: anotherKeys.publicKey,
        );
        expect(correctValidation.isValid, isTrue);
        print('   ‚úÖ –ù–æ –≤–∞–ª–∏–¥–Ω–∞ —Å–æ —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º');
      } finally {
        anotherKeys.privateKey.dispose();
        anotherKeys.publicKey.dispose();
      }

      print(
          '\nüõ°Ô∏è –í–´–í–û–î: –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å—å –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –õ–Æ–ë–´–• –∏–∑–º–µ–Ω–µ–Ω–∏–π!');
      print('   ‚Ä¢ –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏');
      print('   ‚Ä¢ –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–ª—é—á–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      print('   ‚Ä¢ –ö–∞–∂–¥–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ –∫–ª—é—á–µ–π');
      print(
          '   ‚Ä¢ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏');
    });
  });
}
