// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'dart:typed_data';
import 'package:licensify/licensify.dart';

/// üîê –ü—Ä–∏–º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Licensify
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∑–∞—â–∏—Ç–µ –∫–ª—é—á–µ–π –≤ –ø–∞–º—è—Ç–∏
/// –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
void main() async {
  print('üîê SECURE LICENSIFY USAGE EXAMPLES');
  print('===================================\n');

  await basicSecureUsage();
  await automaticKeyCleanup();
  await manualKeyManagement();
  await bestPracticesDemo();
}

/// 1. –ë–∞–∑–æ–≤–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
Future<void> basicSecureUsage() async {
  print('1Ô∏è‚É£ BASIC SECURE USAGE');
  print('======================\n');

  // ‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô —Å–ø–æ—Å–æ–± - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –∫–ª—é—á–µ–π
  final result = await Licensify.createLicenseWithKeys(
    appId: 'com.example.secure',
    expirationDate: DateTime.now().add(const Duration(days: 30)),
    type: LicenseType.pro,
    features: {
      'max_users': 100,
      'advanced_features': true,
    },
  );

  print('‚úÖ License generated securely');
  print('   Token: ${result.license.token.substring(0, 40)}...');
  print('   üîí Private key automatically zeroed after generation');
  print('   üì¶ Public key bytes: ${result.publicKeyBytes.length} bytes\n');
}

/// 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–ª—é—á–µ–π
Future<void> automaticKeyCleanup() async {
  print('2Ô∏è‚É£ AUTOMATIC KEY CLEANUP');
  print('=========================\n');

  // –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π
  final encryptResult = await Licensify.encryptDataWithKey(
    data: {
      'customer_id': 'ultra-secret-12345',
      'api_key': 'sk-super-secret-api-key',
      'internal_token': 'internal-system-token-xyz',
    },
  );

  print('‚úÖ Data encrypted securely');
  print('   Token: ${encryptResult.encryptedToken.substring(0, 40)}...');
  print('   üîí Symmetric key automatically zeroed');
  print('   üì¶ Key bytes: ${encryptResult.keyBytes.length} bytes\n');

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
  final keyPair = await LicensifyKey.generatePublicKeyPair();

  // –°–æ–∑–¥–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  final testLicense = await Licensify.createLicense(
    privateKey: keyPair.privateKey,
    appId: 'com.test.validation',
    expirationDate: DateTime.now().add(const Duration(days: 7)),
  );

  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π —á–µ—Ä–µ–∑ –±–∞–π—Ç—ã –∫–ª—é—á–∞
  final publicKeyBytes = Uint8List.fromList(keyPair.publicKey.keyBytes);
  final result = await Licensify.validateLicenseWithKeyBytes(
    license: testLicense,
    publicKeyBytes: publicKeyBytes,
  );

  print('‚úÖ License validated: ${result.isValid}');
  print('   Message: ${result.message}');
  print('   üîí Public key automatically zeroed\n');

  // –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–ª—é—á–∏
  keyPair.privateKey.dispose();
  keyPair.publicKey.dispose();
}

/// 3. –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å)
Future<void> manualKeyManagement() async {
  print('3Ô∏è‚É£ MANUAL KEY MANAGEMENT');
  print('==========================\n');

  LicensifyKeyPair? keyPair;
  LicensifySymmetricKey? symmetricKey;

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
    keyPair = await LicensifyKey.generatePublicKeyPair();
    symmetricKey = LicensifyKey.generateLocalKey();

    print('‚úÖ Keys generated');
    print('   Private key disposed: ${keyPair.privateKey.isDisposed}');
    print('   Public key disposed: ${keyPair.publicKey.isDisposed}');
    print('   Symmetric key disposed: ${symmetricKey.isDisposed}');

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á–∞–º —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ API
    final testLicense = await Licensify.createLicense(
      privateKey: keyPair.privateKey,
      appId: 'com.test.manual',
      expirationDate: DateTime.now().add(const Duration(days: 1)),
    );

    print('‚úÖ License generated with secure key access');

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    final encryptedData = await Licensify.encryptData(
      data: {
        'secret': 'information',
        'timestamp': DateTime.now().toIso8601String(),
      },
      encryptionKey: symmetricKey,
    );

    print('‚úÖ Data encrypted with secure key access');
    print('   Token: ${encryptedData.substring(0, 40)}...');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
    final validationResult = await Licensify.validateLicense(
      license: testLicense,
      publicKey: keyPair.publicKey,
    );

    print('‚úÖ License validation: ${validationResult.isValid}');
    print('   üîí All temporary key copies automatically zeroed');
  } finally {
    // –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º –∫–ª—é—á–∏ –≤ –±–ª–æ–∫–µ finally
    keyPair?.privateKey.dispose();
    keyPair?.publicKey.dispose();
    symmetricKey?.dispose();

    print('\nüîí All keys manually disposed');
    print(
        '   Private key disposed: ${keyPair?.privateKey.isDisposed ?? 'null'}');
    print('   Public key disposed: ${keyPair?.publicKey.isDisposed ?? 'null'}');
    print('   Symmetric key disposed: ${symmetricKey?.isDisposed ?? 'null'}');
  }
}

/// 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
Future<void> bestPracticesDemo() async {
  print('\n4Ô∏è‚É£ SECURITY BEST PRACTICES');
  print('============================\n');

  print(
      '‚úÖ DO - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Licensify.createLicenseWithKeys() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏');
  print(
      '‚úÖ DO - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Licensify.encryptDataWithKey() –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
  print(
      '‚úÖ DO - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Licensify.validateLicenseWithKeyBytes() –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
  print(
      '‚úÖ DO - –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–π—Ç–µ dispose() –≤ –±–ª–æ–∫–µ finally –ø—Ä–∏ —Ä—É—á–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏');
  print('‚úÖ DO - –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–µ–π –≤ –ø–∞–º—è—Ç–∏');
  print('‚úÖ DO - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ isDisposed –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–µ–π');

  print('\n‚ùå DON\'T - –ù–µ —Ö—Ä–∞–Ω–∏—Ç–µ –±–∞–π—Ç—ã –∫–ª—é—á–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏');
  print('‚ùå DON\'T - –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ keyBytes –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑ –æ–±–Ω—É–ª–µ–Ω–∏—è');
  print('‚ùå DON\'T - –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤—ã–∑—ã–≤–∞—Ç—å dispose()');
  print('‚ùå DON\'T - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ –ø–æ—Å–ª–µ dispose()');
  print('‚ùå DON\'T - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –Ω–∞–ø—Ä—è–º—É—é');

  print('\nüõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ê–¢–ê–ö:');
  print('   ‚Ä¢ Memory dump attacks - –∫–ª—é—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω—É–ª—è—é—Ç—Å—è');
  print('   ‚Ä¢ Key reuse - –∫–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏');
  print('   ‚Ä¢ Accidental exposure - defensive copying –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫–∏');
  print('   ‚Ä¢ Lifecycle management - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏ —Ä—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞');
  print('   ‚Ä¢ API misuse - –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑–≤–Ω–µ');

  print('\n‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –í DART:');
  print('   ‚Ä¢ –ù–µ—Ç native secure memory –∫–∞–∫ –≤ C/C++');
  print('   ‚Ä¢ GC –º–æ–∂–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏');
  print('   ‚Ä¢ –ù–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏');
  print('   ‚Ä¢ –ù–æ –Ω–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫–∏!');

  print('\nüìñ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  print('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–æ–≤');
  print('   ‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ secure storage');
  print('   ‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤');
  print('   ‚Ä¢ –õ–æ–≥–∏—Ä—É–π—Ç–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π');
  print(
      '   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HSM –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π');
  print(
      '   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω–æ–µ API Licensify –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');

  print('\nüéØ –ü–†–ò–ú–ï–†–´ –ë–ï–ó–û–ü–ê–°–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:');

  // –ü–∞—Ç—Ç–µ—Ä–Ω 1: –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
  print('\n   üì¶ –ü–∞—Ç—Ç–µ—Ä–Ω 1: –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ');
  await Licensify.encryptDataWithKey(
    data: {'temp': 'data'},
  );
  print('      ‚úÖ –ö–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—á–∏—â–µ–Ω');
  print('      üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ keyBytes –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏');

  // –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  print('\n   üîç –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞');
  final quickLicense = await Licensify.createLicenseWithKeys(
    appId: 'com.example.quick',
    expirationDate: DateTime.now().add(const Duration(hours: 1)),
  );

  final quickValidation = await Licensify.validateLicenseWithKeyBytes(
    license: quickLicense.license,
    publicKeyBytes: quickLicense.publicKeyBytes,
  );
  print('      ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: ${quickValidation.isValid}');
  print('      üîí –í—Å–µ –∫–ª—é—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã');

  print('\nüöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!');
}
