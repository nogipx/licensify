// SPDX-FileCopyrightText: 2025 Karim "nogipx" Mamatkazin <nogipx@gmail.com>
//
// SPDX-License-Identifier: LGPL-3.0-or-later

import 'package:licensify/licensify.dart';

/// üîê –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API Licensify
///
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
/// - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ª–∏—Ü–µ–Ω–∑–∏–π
/// - –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
/// - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –∫–ª—é—á–∞–º–∏
Future<void> main() async {
  print('üöÄ Licensify Unified API Examples');
  print('=' * 50);

  // ========================================
  // üìù –ë–∞–∑–æ–≤—ã–π workflow —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏
  // ========================================
  await basicLicensingWorkflow();

  print('\n${'=' * 50}');

  // ========================================
  // üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  // ========================================
  await dataEncryptionExample();

  print('\n${'=' * 50}');

  // ========================================
  // üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ secure –æ–ø–µ—Ä–∞—Ü–∏–∏
  // ========================================
  await advancedSecureOperations();

  print('\n${'=' * 50}');

  // ========================================
  // üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  // ========================================
  await securityBestPractices();
}

/// –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–π
Future<void> basicLicensingWorkflow() async {
  print('üìù –ë–∞–∑–æ–≤—ã–π workflow —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏');
  print('-' * 30);

  // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
  final keys = await Licensify.generateSigningKeys();

  try {
    print('‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    print('   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${keys.privateKey.keyLength} –±–∞–π—Ç');
    print('   –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ${keys.publicKey.keyLength} –±–∞–π—Ç');

    // 2. –°–æ–∑–¥–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    final license = await Licensify.createLicense(
      privateKey: keys.privateKey,
      appId: 'com.example.awesome-app',
      expirationDate: DateTime.now().add(Duration(days: 365)),
      type: LicenseType.pro,
      features: {
        'max_users': 100,
        'api_access': true,
        'premium_support': true,
        'custom_branding': true,
      },
      metadata: {
        'customer': 'Acme Corporation',
        'purchase_order': 'PO-2025-001',
        'sales_rep': 'john.doe@example.com',
      },
    );

    print('‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    print('   App ID: ${license.appId}');
    print('   –¢–∏–ø: ${license.type.name}');
    print('   –°—Ä–æ–∫: ${license.expirationDate}');
    print('   –ü—Ä–æ–±–Ω–∞—è: ${license.isTrial}');
    print('   –¢–æ–∫–µ–Ω: ${license.token.substring(0, 50)}...');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    final validationResult = await Licensify.validateLicense(
      license: license,
      publicKey: keys.publicKey,
    );

    if (validationResult.isValid) {
      print('‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!');
      print('   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${license.features}');
      print('   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${license.metadata}');
    } else {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationResult.message}');
    }

    // 4. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    final signatureResult = await Licensify.validateSignature(
      license: license,
      publicKey: keys.publicKey,
    );

    print(
        '‚úÖ –ü–æ–¥–ø–∏—Å—å ${signatureResult.isValid ? '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' : '–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'}');
  } finally {
    // üõ°Ô∏è –í–∞–∂–Ω–æ! –û—á–∏—â–∞–µ–º –∫–ª—é—á–∏
    keys.privateKey.dispose();
    keys.publicKey.dispose();
  }
}

/// –ü—Ä–∏–º–µ—Ä —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
Future<void> dataEncryptionExample() async {
  print('üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
  print('-' * 20);

  // 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  final sensitiveData = {
    'user_id': 'user_12345',
    'api_key': 'sk-1234567890abcdef1234567890abcdef',
    'permissions': ['read', 'write', 'admin'],
    'session_data': {
      'login_time': DateTime.now().toIso8601String(),
      'ip_address': '192.168.1.100',
      'user_agent': 'MyApp/1.0.0',
    },
    'secret_config': {
      'database_url': 'postgresql://user:pass@localhost:5432/mydb',
      'redis_url': 'redis://localhost:6379',
      'jwt_secret': 'super-secret-jwt-key-12345',
    },
  };

  // 2. –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
  final encryptionResult = await Licensify.encryptDataWithKey(
    data: sensitiveData,
    footer: 'app_version=1.0.0',
  );

  print('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–∞');
  print('   –¢–æ–∫–µ–Ω: ${encryptionResult.encryptedToken.substring(0, 50)}...');
  print('   –ö–ª—é—á: ${encryptionResult.keyBytes.length} –±–∞–π—Ç');

  // 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
  final decryptionKey =
      Licensify.encryptionKeyFromBytes(encryptionResult.keyBytes);
  try {
    // 4. –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    final decryptedData = await Licensify.decryptData(
      encryptedToken: encryptionResult.encryptedToken,
      encryptionKey: decryptionKey,
    );

    print('‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã');
    print('   User ID: ${decryptedData['user_id']}');
    print('   API Key: ${decryptedData['api_key']}');
    print('   Permissions: ${decryptedData['permissions']}');
  } finally {
    // üõ°Ô∏è –í–∞–∂–Ω–æ! –û—á–∏—â–∞–µ–º –∫–ª—é—á
    decryptionKey.dispose();
  }
}

/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ secure –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–ª—é—á–∞–º–∏
Future<void> advancedSecureOperations() async {
  print('üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ secure –æ–ø–µ—Ä–∞—Ü–∏–∏');
  print('-' * 33);

  // 1. –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π
  print('üîë –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π...');

  final result = await Licensify.createLicenseWithKeys(
    appId: 'com.example.secure-app',
    expirationDate: DateTime.now().add(Duration(days: 30)),
    type: LicenseType('enterprise'),
    features: {
      'unlimited_users': true,
      'custom_integrations': true,
      'priority_support': true,
      'white_labeling': true,
    },
    metadata: {
      'enterprise_tier': 'platinum',
      'contract_id': 'ENT-2025-001',
    },
  );

  print('‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π');
  print('   App ID: ${result.license.appId}');
  print('   –¢–∏–ø: ${result.license.type.name}');
  print('   –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ${result.publicKeyBytes.length} –±–∞–π—Ç');

  // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞
  final validationResult = await Licensify.validateLicenseWithKeyBytes(
    license: result.license,
    publicKeyBytes: result.publicKeyBytes,
  );

  print(
      '‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞: ${validationResult.isValid ? '—É—Å–ø–µ—à–Ω–∞' : '–ø—Ä–æ–≤–∞–ª–µ–Ω–∞'}');

  // 3. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–∞
  print('üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–∞...');

  final encryptionResult = await Licensify.encryptDataWithKey(
    data: {
      'license_server_config': {
        'endpoint': 'https://api.example.com/licenses',
        'api_token': 'token_abcdef123456',
        'webhook_secret': 'webhook_secret_xyz789',
      },
      'feature_flags': {
        'advanced_analytics': true,
        'multi_tenant': true,
        'custom_themes': true,
      },
    },
    footer: 'config_version=2.1.0',
  );

  print('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª—é—á–∞');
  print('   –¢–æ–∫–µ–Ω: ${encryptionResult.encryptedToken.substring(0, 50)}...');
  print('   –ö–ª—é—á: ${encryptionResult.keyBytes.length} –±–∞–π—Ç');

  // 4. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
  final decryptionKey =
      Licensify.encryptionKeyFromBytes(encryptionResult.keyBytes);
  try {
    final decryptedConfig = await Licensify.decryptData(
      encryptedToken: encryptionResult.encryptedToken,
      encryptionKey: decryptionKey,
    );

    print('‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω');
    print(
        '   Endpoint: ${decryptedConfig['license_server_config']['endpoint']}');
    print('   Feature flags: ${decryptedConfig['feature_flags']}');
  } finally {
    decryptionKey.dispose();
  }
}

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
Future<void> securityBestPractices() async {
  print('üéØ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  print('-' * 34);

  // 1. –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
  print('‚è±Ô∏è  –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏...');

  // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–µ –∫–ª—é—á–∏ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  for (int i = 1; i <= 3; i++) {
    final tempKeys = await Licensify.generateSigningKeys();
    try {
      final tempLicense = await Licensify.createLicense(
        privateKey: tempKeys.privateKey,
        appId: 'com.example.temp-$i',
        expirationDate:
            DateTime.now().add(Duration(minutes: 5)), // –ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫
        type: LicenseType('trial'),
        isTrial: true,
        features: {'limited_access': true},
      );

      print('   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è $i —Å–æ–∑–¥–∞–Ω–∞');
      print('      –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${tempLicense.expirationDate}');
    } finally {
      // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º –∫–ª—é—á–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      tempKeys.privateKey.dispose();
      tempKeys.publicKey.dispose();
    }
  }

  // 2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π (–ø—Ä–∏–º–µ—Ä)
  print('üíæ –ü—Ä–∏–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π...');

  final masterKeys = await Licensify.generateSigningKeys();
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ –±–∞–π—Ç—ã –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
    final keyStorage = masterKeys.asBytes;
    print('   üì¶ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è:');
    print('      –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: ${keyStorage.privateKeyBytes.length} –±–∞–π—Ç');
    print('      –ü—É–±–ª–∏—á–Ω—ã–π: ${keyStorage.publicKeyBytes.length} –±–∞–π—Ç');

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    final restoredKeys = Licensify.keysFromBytes(
      privateKeyBytes: keyStorage.privateKeyBytes,
      publicKeyBytes: keyStorage.publicKeyBytes,
    );

    try {
      print('   üîÑ –ö–ª—é—á–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
      final testLicense = await Licensify.createLicense(
        privateKey: restoredKeys.privateKey,
        appId: 'com.example.restored-key-test',
        expirationDate: DateTime.now().add(Duration(days: 1)),
        type: LicenseType.standard,
      );

      final validation = await Licensify.validateLicense(
        license: testLicense,
        publicKey: restoredKeys.publicKey,
      );

      print('   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç: ${validation.isValid}');
    } finally {
      restoredKeys.privateKey.dispose();
      restoredKeys.publicKey.dispose();
    }
  } finally {
    masterKeys.privateKey.dispose();
    masterKeys.publicKey.dispose();
  }

  // 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  print('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
  print('   üîê –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–π—Ç–µ dispose() –¥–ª—è –∫–ª—é—á–µ–π –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
  print('   üíæ –•—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ');
  print('   ‚è∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ–±–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π');
  print('   üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–æ—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ –≤ production');
  print('   üìä –õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏ –¥–ª—è –∞—É–¥–∏—Ç–∞');
  print('   üö´ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ —Å–µ—Ç–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ');
  print(
      '   ‚úÖ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞');
}
